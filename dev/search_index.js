var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Ownership-Macros","page":"API Reference","title":"Ownership Macros","text":"","category":"section"},{"location":"api/#BorrowChecker.MacrosModule.@own","page":"API Reference","title":"BorrowChecker.MacrosModule.@own","text":"@own [:mut] x = value\n@own [:mut] x, y, z = (value1, value2, value3)\n@own [:mut] for var in iter\n    # body\nend\n@own [:mut] x  # equivalent to @own [:mut] x = x\n@own [:mut] (x, y)  # equivalent to @own [:mut] (x, y) = (x, y)\n\nCreate a new owned variable. If :mut is specified, the value will be mutable. Otherwise, the value will be immutable.\n\nYou may also use @own in a for loop to create an owned value for each iteration.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@move","page":"API Reference","title":"BorrowChecker.MacrosModule.@move","text":"@move [:mut] new = old\n\nTransfer ownership from one variable to another, invalidating the old variable. If :mut is specified, the destination will be mutable. Otherwise, the destination will be immutable. For isbits types, this will automatically use @clone instead.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@clone","page":"API Reference","title":"BorrowChecker.MacrosModule.@clone","text":"@clone [:mut] new = old\n\nCreate a deep copy of a value, without moving the source. If :mut is specified, the destination will be mutable. Otherwise, the destination will be immutable.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@take","page":"API Reference","title":"BorrowChecker.MacrosModule.@take","text":"@take var\n\nReturns the inner value and does a deepcopy. This does not mark the original as moved.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@take!","page":"API Reference","title":"BorrowChecker.MacrosModule.@take!","text":"@take! var\n\nTake ownership of a value, typically used in function arguments. Returns the inner value and marks the original as moved. For isbits types, this will return a copy and not mark the original as moved.\n\n\n\n\n\n","category":"macro"},{"location":"api/#References-and-Lifetimes","page":"API Reference","title":"References and Lifetimes","text":"","category":"section"},{"location":"api/#BorrowChecker.MacrosModule.@lifetime","page":"API Reference","title":"BorrowChecker.MacrosModule.@lifetime","text":"@lifetime a begin\n    @ref ~a rx = x\n    # use refs here\nend\n\nCreate a lifetime scope for references. References created with this lifetime are only valid within the block and are automatically cleaned up when the block exits.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@ref","page":"API Reference","title":"BorrowChecker.MacrosModule.@ref","text":"@ref ~lifetime [:mut] var = value\n@ref ~lifetime [:mut] (var1, var2, ...) = (value1, value2, ...)\n@ref ~lifetime [:mut] for var in iter\n    # body\nend\n\nCreate a reference to an owned value within a lifetime scope. See the @lifetime macro for more information on lifetime scopes.\n\nIf :mut is specified, creates a mutable reference. Otherwise, creates an immutable reference. Returns a Borrowed{T} or BorrowedMut{T} that forwards access to the underlying value.\n\nwarning: Warning\nThis will not detect aliasing in the iterator.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MutexModule.Mutex","page":"API Reference","title":"BorrowChecker.MutexModule.Mutex","text":"Mutex{T} <: AbstractMutex{T}\n\nA mutex that protects a value of type T. Provides safe concurrent access to the protected value.\n\nExample\n\nm = Mutex([1, 2, 3])\nlock(m)\n@ref_into :mut arr = m[]\npush!(arr, 4)\nunlock(m)\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.MacrosModule.@ref_into","page":"API Reference","title":"BorrowChecker.MacrosModule.@ref_into","text":"@ref_into [:mut] var = mutex[]\n\nCreate a reference to the protected value in a mutex.\n\nIf :mut is specified, creates a mutable reference. Otherwise, creates an immutable reference.\n\nExamples\n\nm = Mutex([1, 2, 3])\nlock(m) do\n    @ref_into :mut arr2 = m[]\n    push!(arr2, 4)\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@bc","page":"API Reference","title":"BorrowChecker.MacrosModule.@bc","text":"@bc func(args...; kwargs...)\n\nCalls func with the given arguments and keyword arguments, automatically creating temporary borrows for arguments that appear to be owned variables.\n\nExamples\n\nSay that we wish to safely modify an array by reference. We have two owned variables, ar1 and ar2, and we wish to add the first element of ar2 to ar1.\n\n@own :mut ar1 = [1, 2]\n@own ar2 = [3, 4]\n\nadd_first!(x, y) = (x[1] += y[1]; nothing)\n\nIf we set up a lifetime scope manually, we might write:\n\n@lifetime lt begin\n    @ref ~lt :mut ref1 = ar1\n    @ref ~lt ref2 = ar2\n    add_first!(ref1, ref2)\nend\n\nHowever, most of the time you only need to create a lifetime scope for a single function call, so @bc lets us do this automatically:\n\n@bc add_first!(@mut(ar1), ar2)\n\nThis will evaluate to something that is quite similar to the manual lifetime scope.\n\n@bc also supports non-owned variables, which will simply get passed through as-is.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@mut","page":"API Reference","title":"BorrowChecker.MacrosModule.@mut","text":"@mut expr\n\nMarks a value to be borrowed mutably in a @bc macro call.\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@&","page":"API Reference","title":"BorrowChecker.MacrosModule.@&","text":"@&(T)\n@&(:mut, T)\n\nType alias macro for borrowed types. @& T expands to Union{T, Borrowed{T}} and @&(:mut, T) expands to Union{T, BorrowedMut{T}} (as well as their LazyAccessor versions).\n\nThis is useful for writing generic signatures that accept either a raw value or a borrowed value.\n\nExamples\n\nHere, we define a function that accepts a mutable borrow of a Vector{Int}. We also demonstrate the use of a Mutex to protect the vector.\n\njulia> function foo(x::@&(:mut, Vector{Int}))\n           push!(x, 4)\n           return nothing\n       end\nfoo (generic function with 1 method)\n\njulia> m = Mutex([1, 2, 3])\nMutex{Vector{Int64}}([1, 2, 3])\n\njulia> lock(m) do\n           @ref_into :mut r = m[]\n           foo(r)\n       end\n\njulia> println(m)\nMutex{Vector{Int64}}([1, 2, 3, 4])\n\n\n\n\n\n","category":"macro"},{"location":"api/#Validation","page":"API Reference","title":"Validation","text":"","category":"section"},{"location":"api/#BorrowChecker.MacrosModule.@cc","page":"API Reference","title":"BorrowChecker.MacrosModule.@cc","text":"@cc closure_expr\n\n\"Closure Check\" is a macro that attempts to verify a closure is compatible with the borrow checker.\n\nOnly immutable references (created with @ref and @bc) are allowed to be captured; all other owned and borrowed variables that are captured will trigger an error.\n\nExamples\n\n@own x = 1\n@own :mut y = 2\n\n@lifetime lt begin\n    @ref ~lt z = x\n    @ref ~lt :mut w = y\n    \n    # These error as the capturing breaks borrowing rules\n    bad = @cc () -> x + 1\n    bad2 = @cc () -> w + 1\n    \n    # However, you are allowed to capture immutable references\n    good = @cc () -> z + 1\n    # This will not error.\nend\n\n\n\n\n\n","category":"macro"},{"location":"api/#BorrowChecker.MacrosModule.@spawn","page":"API Reference","title":"BorrowChecker.MacrosModule.@spawn","text":"BorrowChecker.@spawn [options...] expr\n\nThreads.@spawn but with @cc applied to the expression to ensure safe captures.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/#BorrowChecker.TypesModule.AbstractOwned","page":"API Reference","title":"BorrowChecker.TypesModule.AbstractOwned","text":"AbstractOwned{T}\n\nBase type for all owned value types.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.AbstractBorrowed","page":"API Reference","title":"BorrowChecker.TypesModule.AbstractBorrowed","text":"AbstractBorrowed{T}\n\nBase type for all borrowed reference types.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.Owned","page":"API Reference","title":"BorrowChecker.TypesModule.Owned","text":"Owned{T} <: AbstractOwned{T}\n\nAn immutable owned value. Common operations:\n\nCreate using @own x = value\nAccess value using @take! (moves) or @take (copies)\nBorrow using @ref\nAccess fields/indices via .field or [indices...] (returns LazyAccessor)\n\nOnce moved, the value cannot be accessed again.\n\nInternal fields (not part of public API):\n\nvalue::T: The contained value\nmoved::Bool: Whether the value has been moved\nimmutable_borrows::Int: Count of active immutable borrows\nsymbol::Symbol: Variable name for error reporting\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.OwnedMut","page":"API Reference","title":"BorrowChecker.TypesModule.OwnedMut","text":"OwnedMut{T} <: AbstractOwned{T}\n\nA mutable owned value. Common operations:\n\nCreate using @own :mut x = value\nAccess value using @take! (moves) or @take (copies)\nModify by setproperty! or setindex!: x.field = value or x[indices...] = value\nBorrow using @ref or @ref :mut\nAccess fields/indices via .field or [indices...] (returns LazyAccessor)\n\nOnce moved, the value cannot be accessed again.\n\nInternal fields (not part of public API):\n\nvalue::T: The contained value\nmoved::Bool: Whether the value has been moved\nimmutable_borrows::Int: Count of active immutable borrows\nmutable_borrows::Int: Count of active mutable borrows\nsymbol::Symbol: Variable name for error reporting\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.Borrowed","page":"API Reference","title":"BorrowChecker.TypesModule.Borrowed","text":"Borrowed{T,O<:AbstractOwned} <: AbstractBorrowed{T}\n\nAn immutable reference to an owned value. Common operations:\n\nCreate using @ref lt x = value\nAccess value using @take (copies)\nAccess fields/indices via .field or [indices...] (returns LazyAccessor)\n\nMultiple immutable references can exist simultaneously. The reference is valid only within its lifetime scope.\n\nInternal fields (not part of public API):\n\nvalue::T: The referenced value\nowner::O: The original owned value\nlifetime::Lifetime: The scope in which this reference is valid\nsymbol::Symbol: Variable name for error reporting\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.BorrowedMut","page":"API Reference","title":"BorrowChecker.TypesModule.BorrowedMut","text":"BorrowedMut{T,O<:OwnedMut} <: AbstractBorrowed{T}\n\nA mutable reference to an owned value. Common operations:\n\nCreate using @ref lt :mut x = value\nAccess value using @take (copies)\nAccess fields/indices via .field or [indices...] (returns LazyAccessor)\n\nOnly one mutable reference can exist at a time, and no immutable references can exist simultaneously.\n\nInternal fields (not part of public API):\n\nvalue::T: The referenced value\nowner::O: The original owned value\nlifetime::Lifetime: The scope in which this reference is valid\nsymbol::Symbol: Variable name for error reporting\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.LazyAccessor","page":"API Reference","title":"BorrowChecker.TypesModule.LazyAccessor","text":"LazyAccessor{T,P,S,O<:Union{AbstractOwned,AbstractBorrowed}} <: AbstractWrapper{T}\n\nA lazy accessor for properties or indices of owned or borrowed values. Maintains ownership semantics while allowing property/index access without copying or moving.\n\nCreated automatically when accessing properties or indices of owned/borrowed values:\n\n@own x = (a=1, b=2)\nx.a  # Returns a LazyAccessor\n\nInternal fields (not part of public API):\n\nparent::P: The parent value being accessed\nproperty::S: The property/index being accessed\nproperty_type::Type{T}: Type of the accessed property/index\ntarget::O: The original owned/borrowed value\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.OrBorrowed","page":"API Reference","title":"BorrowChecker.TypesModule.OrBorrowed","text":"OrBorrowed{T}\n\nType alias for accepting either a value of type T or a borrowed reference to it.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.TypesModule.OrBorrowedMut","page":"API Reference","title":"BorrowChecker.TypesModule.OrBorrowedMut","text":"OrBorrowedMut{T}\n\nType alias for accepting either a value of type T or a mutable borrowed reference to it.\n\n\n\n\n\n","category":"type"},{"location":"api/#Traits","page":"API Reference","title":"Traits","text":"","category":"section"},{"location":"api/#BorrowChecker.StaticTraitModule.is_static","page":"API Reference","title":"BorrowChecker.StaticTraitModule.is_static","text":"is_static(x)\n\nThis trait is used to determine if we can safely @take! a value without marking the original as moved.\n\nThis is somewhat analogous to the Copy trait in Rust, although because Julia immutables are truly immutable, we actually do not need to copy on these.\n\nFor the most part, this is equal to isbits, but it also includes things like Symbol and Type{T} (recursively), which are not isbits, but which are immutable.\n\n\n\n\n\n","category":"function"},{"location":"api/#Errors","page":"API Reference","title":"Errors","text":"","category":"section"},{"location":"api/#BorrowChecker.ErrorsModule.BorrowError","page":"API Reference","title":"BorrowChecker.ErrorsModule.BorrowError","text":"abstract type BorrowError <: Exception end\n\nBase type for all errors related to borrow checking rules.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.ErrorsModule.MovedError","page":"API Reference","title":"BorrowChecker.ErrorsModule.MovedError","text":"MovedError <: BorrowError\n\nError thrown when attempting to use a value that has been moved.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.ErrorsModule.BorrowRuleError","page":"API Reference","title":"BorrowChecker.ErrorsModule.BorrowRuleError","text":"BorrowRuleError <: BorrowError\n\nError thrown when attempting to violate borrow checking rules, such as having multiple mutable references.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.ErrorsModule.SymbolMismatchError","page":"API Reference","title":"BorrowChecker.ErrorsModule.SymbolMismatchError","text":"SymbolMismatchError <: BorrowError\n\nError thrown when attempting to reassign a variable without using proper ownership transfer mechanisms.\n\n\n\n\n\n","category":"type"},{"location":"api/#BorrowChecker.ErrorsModule.ExpiredError","page":"API Reference","title":"BorrowChecker.ErrorsModule.ExpiredError","text":"ExpiredError <: BorrowError\n\nError thrown when attempting to use a reference whose lifetime has expired.\n\n\n\n\n\n","category":"type"},{"location":"api/#Internals","page":"API Reference","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Normally, you should rely on OrBorrowed and OrBorrowedMut to work with borrowed values, or use @take and @take! to unwrap owned values. However, for convenience, it might be useful to define functions on Owned and OwnedMut types, if you are confident that your operation will not \"move\" the input or return a view of it.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Many functions in Base are already overloaded. But if you need to define your own, you can do so by using the request_value function and the AllWrappers type union.","category":"page"},{"location":"api/#Core-Types","page":"API Reference","title":"Core Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"AllWrappers{T}: A type union that includes all wrapper types (Owned{T}, OwnedMut{T}, Borrowed{T}, BorrowedMut{T}, and LazyAccessor{T}). This is used to write generic methods that work with any wrapped value.","category":"page"},{"location":"api/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"request_value(x, Val(:read)): Request read access to a wrapped value\nrequest_value(x, Val(:write)): Request write access to a wrapped value","category":"page"},{"location":"api/#Examples","page":"API Reference","title":"Examples","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Here's how common operations are overloaded:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Binary operations (like *) that only need read access:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"function Base.:(*)(l::AllWrappers{<:Number}, r::AllWrappers{<:Number})\n    return Base.:(*)(request_value(l, Val(:read)), request_value(r, Val(:read)))\nend","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mutating operations (like pop!) that need write access:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"function Base.pop!(r::AllWrappers)\n    return Base.pop!(request_value(r, Val(:write)))\nend","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The request_value function performs safety checks before allowing access:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"For read access: Verifies the value hasn't been moved\nFor write access: Verifies the value is mutable and not borrowed","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Note that for operations that need write access, and return a view of the input, it is wise to modify the standard output to return nothing instead, which is what we do for push!:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"function Base.push!(r::AllWrappers, items...)\n    Base.push!(request_value(r, Val(:write)), items...)\n    return nothing\nend","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"While this violates the expected return type, it is a necessary evil for safety. The nothing return will cause loud errors if you have code that relies on this design. This is good! Loud bugs are collaborators; silent bugs are saboteurs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#BorrowChecker.jl","page":"Home","title":"BorrowChecker.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is an experimental package for emulating a runtime borrow checker in Julia, using a macro layer over regular code. This is built to mimic Rust's ownership, lifetime, and borrowing semantics. This tool is mainly to be used in development and testing to flag memory safety issues, and help you design safer code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[!WARNING] BorrowChecker.jl does not guarantee memory safety. This library emulates aspects of Rust's ownership model, but it does not do this at a compiler level. Furthermore, BorrowChecker.jl heavily relies on the user's cooperation, and will not prevent you from misusing it, or from mixing it with regular Julia code.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In Julia, when you write x = [1, 2, 3], the actual object exists completely independently of the variable, and you can refer to it from as many variables as you want without issue:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x = [1, 2, 3]\ny = x\nprintln(length(x))\n# 3","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once there are no more references to the object, the \"garbage collector\" will work to free the memory.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rust is much different. For example, the equivalent code is invalid in Rust","category":"page"},{"location":"","page":"Home","title":"Home","text":"let x = vec![1, 2, 3];\nlet y = x;\nprintln!(\"{}\", x.len());\n// error[E0382]: borrow of moved value: `x`","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rust refuses to compile this code. Why? Because in Rust, objects (vec![1, 2, 3]) are owned by variables. When you write let y = x, the ownership of vec![1, 2, 3] is moved to y. Now x is no longer allowed to access it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To fix this, we would either write","category":"page"},{"location":"","page":"Home","title":"Home","text":"let y = x.clone();\n// OR\nlet y = &x;","category":"page"},{"location":"","page":"Home","title":"Home","text":"to either create a copy of the vector, or borrow x using the & operator to create a reference. You can create as many references as you want, but there can only be one original object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This \"ownership\" paradigm can help improve safety of code. Especially in complex, multithreaded codebases, it is easy to shoot yourself in the foot and modify objects which are \"owned\" (editable) by something else. Rust's ownership and lifetime model makes it so that you can prove memory safety of code! Standard thread races are literally impossible. (Assuming you are not using unsafe { ... } to disable safety features, or the borrow checker itself has a bug, etc.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In BorrowChecker.jl, we demonstrate an implementation of some of these ideas. The aim is to build a development layer that can help prevent a few classes of memory safety issues, without affecting runtime behavior of code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The above example, with BorrowChecker.jl, would look like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BorrowChecker\n\n@own x = [1, 2, 3]\n@own y = x\nprintln(length(x))\n# ERROR: Cannot use x: value has been moved","category":"page"},{"location":"","page":"Home","title":"Home","text":"You see, the @own operation has bound the variable x with the object [1, 2, 3]. The second operation then moves the object to y, and flips the .moved flag on x so it can no longer be used by regular operations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The equivalent fixes would respectively be:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@clone y = x\n# OR\n@lifetime a begin\n    @ref ~a y = x\n    #= operations on reference =#\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that BorrowChecker.jl does not prevent you from cheating the system and using y = x (however, the library does try to flag such mistakes by recording symbols used in the macro). To use this library, you will need to buy in to the system to get the most out of it. But the good news is that you can introduce it in a library gradually:  add @own, @move, etc., inside a single function, and call @take! when passing objects to external functions. And for convenience, a variety of standard library functions will automatically forward operations on the underlying objects.","category":"page"},{"location":"#Example:-Preventing-Thread-Races","page":"Home","title":"Example: Preventing Thread Races","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BorrowChecker.jl helps prevent data races by enforcing borrowing rules.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's mock up a simple scenario where two threads modify the same array concurrently:","category":"page"},{"location":"","page":"Home","title":"Home","text":"data = [1, 2, 3]\n\nmodify!(x, i) = (sleep(rand()+0.1); push!(x, i))\n\nt1 = Threads.@spawn modify!(data, 4)\nt2 = Threads.@spawn modify!(data, 5)\n\nfetch(t1); fetch(t2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This has a silent race condition, and the result will be non-deterministic.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, let's see what happens if we had used BorrowChecker:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [1, 2, 3]\n\nt1 = Threads.@spawn @bc modify!(@mut(data), 4)\nt2 = Threads.@spawn @bc modify!(@mut(data), 5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, when you attempt to fetch the tasks, you will get this error:","category":"page"},{"location":"","page":"Home","title":"Home","text":"nested task error: Cannot create mutable reference: `data` is already mutably borrowed","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is because in BorrowChecker.jl's ownership model, similar to Rust, an owned object follows strict borrowing rules to prevent data races and ensure safety. (Though, in practice, you should use BorrowChecker.@spawn instead of Threads.@spawn, so that it validates captured variables.)","category":"page"},{"location":"#Ownership-Rules","page":"Home","title":"Ownership Rules","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At any given time, an object managed by BorrowChecker.jl can only be accessed in one of the following states:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Direct Ownership:\nThe object is accessed directly via its owning variable.\nNo active references (Borrowed or BorrowedMut) exist.\nIn this state, ownership can be transferred (moved) to another variable, after which the original variable becomes inaccessible. The object can also be mutated if it was declared as mutable (@own :mut ...).\nImmutable Borrows:\nOne or more immutable references (Borrowed) to the object exist.\nWhile any immutable reference is active:\nThe original owning variable cannot be mutated directly.\nOwnership cannot be moved.\nNo mutable references (BorrowedMut) can be created.\nMultiple immutable references can coexist peacefully. This allows multiple parts of the code to read the data concurrently without interference.\nA Mutable Borrow:\nExactly one mutable reference (BorrowedMut) to the object exists.\nWhile the mutable reference is active:\nThe original owning variable cannot be accessed or mutated directly.\nOwnership cannot be moved.\nNo other references (neither immutable Borrowed nor other mutable BorrowedMut) can be created.\nThe object can be mutated through the single active mutable reference. This ensures exclusive write access, preventing data races.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In essence: You can have many readers (Borrowed) or one writer (BorrowedMut), but not both simultaneously. While any borrow is active, the original owner faces restrictions (cannot be moved, cannot be mutated directly if borrowed immutably, cannot be accessed at all if borrowed mutably).","category":"page"},{"location":"#Sharp-Edges","page":"Home","title":"Sharp Edges","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[!CAUTION] Be especially careful with closure functions that capture variables, as this is an easy way to silently break the borrowing rules. You should always use the @cc macro to wrap closures as a form of validation:safe_closure = @cc (x, y) -> x + yThis will validate that any captured variable is an immutable reference. Similarly, you should generally prefer the BorrowChecker.@spawn macro instead of Threads.@spawn to validate captured variables.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#Basics","page":"Home","title":"Basics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@own [:mut] x [= value]: Create a new owned value (mutable if :mut is specified)\nThese are Owned{T} and OwnedMut{T} objects, respectively.\nYou can use @own [:mut] x as a shorthand for @own [:mut] x = x to create owned values at the start of a function.\n@move [:mut] new = old: Transfer ownership from one variable to another (mutable destination if :mut is specified). Note that this is simply a more explicit version of @own for moving values.\n@clone [:mut] new = old: Create a deep copy of a value without moving the source (mutable destination if :mut is specified).\n@take[!] var: Unwrap an owned value. Using @take! will mark the original as moved, while @take will perform a copy.\ngetproperty and getindex on owned/borrowed values return a LazyAccessor that preserves ownership/lifetime until the raw value is used.\nFor example, for an object x::Owned{T}, the accessor x.a would return LazyAccessor{typeof(x.a), T, Val{:a}, Owned{T}} which has the same reading/writing constraints as the original.","category":"page"},{"location":"#References-and-Lifetimes","page":"Home","title":"References and Lifetimes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@lifetime lt begin ... end: Create a scope for references whose lifetimes lt are the duration of the block\n@ref ~lt [:mut] var = value: Create a reference, for the duration of lt, to owned value value and assign it to var (mutable if :mut is specified)\nThese are Borrowed{T} and BorrowedMut{T} objects, respectively. Use these in the signature of any function you wish to make compatible with references. In the signature you can use @&(T) and @&(:mut, T) to also allow regular T.\nMutex(value): Creates a thread-safe container for value. Mutexes manage lifetimes implicitly during locks and do not need @own.\n@ref_into [:mut] var = mutex[]: Create a reference to the value inside a mutex.\nUse lock(m) to acquire the lock, @ref_into to create a reference to the value inside the mutex, and unlock(m) to release the lock.\n@bc f(args...; kws...): This convenience macro automatically creates a lifetime scope for the duration of the function, and sets up borrowing for any owned input arguments.\nUse @mut(arg) to mark an input as mutable.\n@& [:mut] T: Alias for Union{T, Borrowed[Mut]{T}} (incl. lazy versions). Use in function signatures to accept T or its borrowed form.","category":"page"},{"location":"#Validation","page":"Home","title":"Validation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@cc closure_expr: Verifies that closures only capture immutable references.\nBorrowChecker.@spawn [options...] expr: A safety wrapper around Threads.@spawn that applies @cc to the expression (which is internally put inside a closure).","category":"page"},{"location":"#Loops","page":"Home","title":"Loops","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@own [:mut] for var in iter: Create a loop over an iterable, assigning ownership of each element to var. The original iter is marked as moved.\n@ref ~lt [:mut] for var in iter: Create a loop over an owned iterable, generating references to each element, for the duration of lt.","category":"page"},{"location":"#Disabling-BorrowChecker","page":"Home","title":"Disabling BorrowChecker","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can disable BorrowChecker.jl's functionality by setting borrow_checker = false in your LocalPreferences.toml file (using Preferences.jl). When disabled, all macros like @own, @move, etc., will simply pass through their arguments without any ownership or borrowing checks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also set the default behavior from within a module (make sure to do this at the very top, before any BorrowChecker calls!)","category":"page"},{"location":"","page":"Home","title":"Home","text":"module MyModule\n    using BorrowChecker: disable_by_default!\n\n    disable_by_default!(@__MODULE__)\n    #= Other code =#\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This can then be overridden by the LocalPreferences.toml file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you wanted to use BorrowChecker in a library, the idea is you could disable it by default with this command, but enable it during testing, to flag any problematic memory patterns.","category":"page"},{"location":"#Further-Examples","page":"Home","title":"Further Examples","text":"","category":"section"},{"location":"#Basic-ownership","page":"Home","title":"Basic ownership","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let's look at the basic ownership system. When you create an owned value, it's immutable by default:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own x = [1, 2, 3]\npush!(x, 4)  # ERROR: Cannot write to immutable","category":"page"},{"location":"","page":"Home","title":"Home","text":"For mutable values, use the :mut flag:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [1, 2, 3]\npush!(data, 4)  # Works! data is mutable","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that various functions have been overloaded with the write access settings, such as push!, getindex, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The @own macro creates an Owned{T} or OwnedMut{T} object. Most functions will not be written to accept these, so you can use @take (copying) or @take! (moving) to extract the owned value:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Functions that expect regular Julia types:\npush_twice!(x::Vector{Int}) = (push!(x, 4); push!(x, 5); x)\n\n@own x = [1, 2, 3]\n@own y = push_twice!(@take!(x))  # Moves ownership of x\n\npush!(x, 4)  # ERROR: Cannot use x: value has been moved","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, for recursively immutable types (like tuples of integers), @take! is smart enough to know that the original can't change, and thus it won't mark a moved:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own point = (1, 2)\nsum1 = write_to_file(@take!(point))  # point is still usable\nsum2 = write_to_file(@take!(point))  # Works again!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is the same behavior as in Rust (c.f., the Copy trait).","category":"page"},{"location":"","page":"Home","title":"Home","text":"There is also the @take(...) macro which never marks the original as moved, and performs a deepcopy when needed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [1, 2, 3]\n@own total = sum_vector(@take(data))  # Creates a copy\npush!(data, 4)  # Original still usable","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note also that for improving safety when using BorrowChecker.jl, the macro will actually store the symbol used. This helps catch mistakes like:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @own x = [1, 2, 3];\n\njulia> y = x;  # Unsafe! Should use @clone, @move, or @own\n\njulia> @take(y)\nERROR: Variable `y` holds an object that was reassigned from `x`.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This won't catch all misuses but it can help prevent some.","category":"page"},{"location":"#Lifetimes","page":"Home","title":"Lifetimes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"References let you temporarily borrow values. This is useful for passing values to functions without moving them. These are created within an explicit @lifetime block:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [1, 2, 3]\n\n@lifetime lt begin\n    @ref ~lt r = data\n    @ref ~lt r2 = data  # Can create multiple _immutable_ references!\n    @test r == [1, 2, 3]\n\n    # While ref exists, data can't be modified:\n    data[1] = 4 # ERROR: Cannot write original while immutably borrowed\nend\n\n# After lifetime ends, we can modify again!\ndata[1] = 4","category":"page"},{"location":"","page":"Home","title":"Home","text":"Just like in Rust, while you can create multiple immutable references, you can only have one mutable reference at a time:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [1, 2, 3]\n\n@lifetime lt begin\n    @ref ~lt :mut r = data\n    @ref ~lt :mut r2 = data  # ERROR: Cannot create mutable reference: value is already mutably borrowed\n    @ref ~lt r2 = data  # ERROR: Cannot create immutable reference: value is mutably borrowed\n\n    # Can modify via mutable reference:\n    r[1] = 4\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you need to pass immutable references of a value to a function, you would modify the signature to accept a Borrowed{T} type. This is similar to the &T syntax in Rust. And, similarly, BorrowedMut{T} is similar to &mut T.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Don't worry about references being used after the lifetime ends, because the lt variable will be expired!","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> @own x = 1\n       @own :mut cheating = []\n       @lifetime lt begin\n           @ref ~lt r = x\n           push!(cheating, r)\n       end\n       \n\njulia> @show cheating[1]\nERROR: Cannot use r: value's lifetime has expired","category":"page"},{"location":"","page":"Home","title":"Home","text":"This makes the use of references inside threads safe, because the threads must finish inside the scope of the lifetime.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Though we can't create multiple mutable references, you are allowed to create multiple mutable references to elements of a collection via the @ref ~lt for syntax:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut data = [[1], [2], [3]]\n\n@lifetime lt begin\n    @ref ~lt :mut for r in data\n        push!(r, 4)\n    end\nend\n\n@show data  # [[1, 4], [2, 4], [3, 4]]","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Mutating-owned-values","page":"Home","title":"Mutating owned values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that if you have a mutable owned value, you can use setproperty! and setindex! as normal:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mutable struct A\n    x::Int\nend\n\n@own :mut a = A(0)\nfor _ in 1:10\n    a.x += 1\nend\n# Move it to an immutable:\n@own a_imm = a","category":"page"},{"location":"","page":"Home","title":"Home","text":"And, as expected:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> a_imm.x += 1\nERROR: Cannot write to immutable\n\njulia> a.x += 1\nERROR: Cannot use a: value has been moved","category":"page"},{"location":"","page":"Home","title":"Home","text":"You should never mutate via variable reassignment. If needed, you can repeatedly @own new objects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own x = 1\nfor _ in 1:10\n    @own x = x + 1\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Cloning-values","page":"Home","title":"Cloning values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sometimes you want to create a completely independent copy of a value. While you could use @own new = @take(old), the @clone macro provides a clearer way to express this intent:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut original = [1, 2, 3]\n@clone copy = original  # Creates an immutable deep copy\n@clone :mut mut_copy = original  # Creates a mutable deep copy\n\npush!(mut_copy, 4)  # Can modify the mutable copy\n@test_throws BorrowRuleError push!(copy, 4)  # Can't modify the immutable copy\npush!(original, 5)  # Original still usable\n\n@test original == [1, 2, 3, 5]\n@test copy == [1, 2, 3]\n@test mut_copy == [1, 2, 3, 4]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Another macro is @move, which is a more explicit version of @own new = @take!(old):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own :mut original = [1, 2, 3]\n@move new = original  # Creates an immutable deep copy\n\n@test_throws MovedError push!(original, 4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that @own new = old will also work as a convenience, but @move is more explicit and also asserts that the new value is owned.","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Safe-use-of-closures","page":"Home","title":"Safe use of closures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Closures in BorrowChecker.jl must follow strict rules because they capture variables from their enclosing scope:","category":"page"},{"location":"","page":"Home","title":"Home","text":"let\n    @own x = 42\n    bad_closure = () -> x + 1  # DANGEROUS: captures owned value\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The @cc macro validates that closures follow these rules:","category":"page"},{"location":"","page":"Home","title":"Home","text":"let\n    @own x = 42\n\n    # This fails - owned values can't be captured\n    @test_throws ErrorException @cc (a,) -> x + a\n\n    @lifetime lt begin\n        @ref ~lt safe_ref = x  # create an immutable reference\n        \n        # This works - immutable references are safe\n        safe_closure = @cc (a,) -> safe_ref + a\n    end\n    # The reference will expire here, ensuring\n    # the closure doesn't break the borrowing rules!\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"For threads, you can use the BorrowChecker.@spawn macro instead of the standard Threads.@spawn. This ensures safe captures by automatically applying @cc to the closure (which is generated internally by @spawn):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own x = 42\n@lifetime lt begin\n    @ref ~lt safe_ref = x\n\n    tasks = [\n        BorrowChecker.@spawn safe_ref + 1\n        for _ in 1:10\n    ]\n    sum(fetch, tasks)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Automated-Borrowing-with-@bc","page":"Home","title":"Automated Borrowing with @bc","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"The @bc macro simplifies calls involving owned variables. Instead of manually creating @lifetime blocks and references, you just wrap the function call in @bc, which will create a lifetime scope for the duration of the function call, and generate references to owned input arguments. Declare which arguments should be mutable with @mut(...).","category":"page"},{"location":"","page":"Home","title":"Home","text":"@own config = Dict(\"enabled\" => true)\n@own :mut data = [1, 2, 3]\n\nfunction process(cfg::@&(Dict), arr::@&(:mut, Vector))\n    push!(arr, cfg[\"enabled\"] ? 4 : -1)\n    return length(arr)\nend\n\n@bc process(config, @mut(data))  # => 4","category":"page"},{"location":"","page":"Home","title":"Home","text":"Under the hood, @bc wraps the function call in a @lifetime block, so references end automatically when the call finishes (and thus lose access to the original object).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This approach works with multiple positional and keyword arguments, and is a convenient way to handle the majority of borrowing patterns. You can freely mix owned, borrowed, and normal Julia values in the same call, and the macro will handle ephemeral references behind the scenes. For cases needing more control or longer lifetimes, manual @lifetime usage is a good option.","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Safe-multi-threading-with-Mutex","page":"Home","title":"Safe multi-threading with Mutex","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"BorrowChecker provides a Mutex type analogous to Rust's Mutex, for thread-safe access to shared data, fully integrated with the ownership and borrowing system.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> m = Mutex([1, 2, 3])\n       # ^Regular Julia assignment syntax is fine for Mutexes!\nMutex{Vector{Int64}}([1, 2, 3])\n\njulia> lock(m);\n\njulia> @ref_into :mut data = m[]\n       # ^Mutable reference to the mutex-protected value\nBorrowedMut{Vector{Int64},OwnedMut{Vector{Int64}}}([1, 2, 3], :data)\n\njulia> push!(data, 4);\n\njulia> unlock(m);\n\njulia> m\nMutex{Vector{Int64}}([1, 2, 3, 4])","category":"page"},{"location":"","page":"Home","title":"Home","text":"The value protected by the mutex is an OwnedMut object, which can therefore be modified.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Because this value is protected by a spinlock, it is safe to pass around with regular Julia assignment syntax. At any point you wish to read or write to the value, you can use the @ref ~m syntax to create a reference to the value.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This reference will automatically expire when the lock is released.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> m = Mutex(Dict(\"count\" => 0))\nMutex{Dict{String, Int64}}(Dict(\"count\" => 0))\n\njulia> @sync for i in 1:100\n           Threads.@spawn begin\n               lock(m) do\n                   @ref_into :mut d = m[]\n                   d[\"count\"] += 1\n               end\n           end\n       end\n\njulia> m\nMutex{Dict{String, Int64}}(Dict(\"count\" => 100))\n\njulia> d = lock(m) do\n           @ref_into :mut d = m[]\n           d\n       end;\n\njulia> d[\"count\"]  # Try to access the value after the lock is released!\nERROR: Cannot use `d`: value's lifetime has expired","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"#Introducing-BorrowChecker.jl-to-Your-Codebase","page":"Home","title":"Introducing BorrowChecker.jl to Your Codebase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When introducing BorrowChecker.jl to your codebase, the first thing is to @own all variables at the top of a particular function. The simplified version of @own is particularly useful in this case:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function process_data(x, y, z)\n    @own x, y\n    @own :mut z\n\n    #= body =#\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This pattern is useful for generic functions because if you pass an owned variable as either x, y, or z, the original function will get marked as moved.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The next pattern that is useful is to use @& T and @& :mut T syntax for extending signatures. This is basically equal to Union{T, Borrowed{T}} and Union{T, BorrowedMut{T}}, respectively (as well as their lazy versions). Let's say you have some function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct Bar{T}\n    x::Vector{T}\nend\n\nfunction foo(bar::Bar{T}) where {T}\n    sum(bar.x)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now, you'd like to modify this so that it can accept references to Bar objects from other functions. Since foo doesn't need to mutate bar, we can modify this as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function foo(bar::@&(Bar{T})) where {T}\n    sum(bar.x)\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Thus, the full process_data function might be something like:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function process_data(x, y, z)\n    @own x, y\n    @own :mut z\n\n    @lifetime lt begin\n        @ref ~lt r = z\n        tasks = [\n            BorrowChecker.@spawn(foo(r)),\n            BorrowChecker.@spawn(foo(r)),\n        ]\n        sum(fetch, tasks)\n    end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Because we modified foo to accept @& Bar{T}, we can safely pass immutable references to z, and it will not be marked as moved in the original context! Immutable references are safe to pass in a multi-threaded context, so this doubles as a good way to prevent unintended thread races.","category":"page"}]
}
